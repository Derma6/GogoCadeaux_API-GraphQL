# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Address model"""
type Address {
  apartment: String!
  city: String!
  country: String!
  id: Float!
  label: String!
  number: Float!
  postalCode: Float!
  street: String!
  user: User!
}

"""Article model"""
type Article {
  description: String!
  id: Float!
  indicativePrice: String
  isOffered: Boolean!
  isOfferedBy: String
  link: String!
  list: List!
  name: String!
  partner: Partner!
  picture: String!
}

"""Create article input"""
input CreateArticleInputType {
  description: String!
  indicativePrice: String
  link: String!
  listId: Float!
  name: String!
  picture: String!
}

"""Create list input"""
input CreateListInput {
  description: String!
  event: EventTypeEnum!
  eventDate: DateTime!
  hideOfferedGifts: Boolean!
  isPrivate: Boolean!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EventTypeEnum {
  BAPTISM
  BIRTH
  BIRTHDAY
  CHRISTMAS
  GIFT
  HOUSE_WARMING
  OTHER
  WEDDING
}

"""List model"""
type List {
  address: Address!
  articles: [Article!]!
  createdAt: DateTime!
  description: String!
  event: EventTypeEnum!
  eventDate: DateTime!
  hideOfferedGifts: Boolean!
  id: Float!
  isPrivate: Boolean!
  title: String!
  updatedAt: DateTime!
  userToLists: [UserToList!]!
}

"""Login input"""
input LoginInput {
  email: String!
  password: String!
}

"""Login output"""
type LoginOutput {
  accessToken: String!
  user: User!
}

type Mutation {
  createArticle(createArticleInput: CreateArticleInputType!): String!
  createList(createListInput: CreateListInput!): List!
  deleteArticle(id: Int!): String!
  deleteList(id: Int!): String!
  deleteUser: String!
  login(loginInput: LoginInput!): LoginOutput!
  offerArticle(setOfferedArticleInput: SetArticleOfferedInputType!): String!
  register(registerInput: RegisterUserInput!): User!
  updateArticle(updateArticleInput: UpdateArticleInput!): String!
  updateList(updateListInput: UpdateListInput!): String!
  updateUser(updateUserInput: UpdateUserInput!): String!
  verifyEmail(verificationCode: String!): String!
}

"""Partner model"""
type Partner {
  affiliateCode: String!
  affiliateParams: String!
  baseUrl: String!
  id: Float!
  logoUrl: String!
  name: String!
}

type Query {
  getAllLists: [List!]!
  getLoggedUserLists: [List!]!
  list(id: Int!): List!
}

"""Register user input"""
input RegisterUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

enum RoleEnumType {
  ADMIN
  USER
}

"""Set article is offered input"""
input SetArticleOfferedInputType {
  id: Int!
  isOffered: Boolean!
  isOfferedBy: String!
}

"""Update articles input"""
input UpdateArticleInput {
  description: String
  id: Int!
  indicativePrice: String
  link: String
  listId: Float
  name: String
  picture: String
}

"""Update list input"""
input UpdateListInput {
  description: String
  event: EventTypeEnum
  eventDate: DateTime
  hideOfferedGifts: Boolean
  id: Int!
  isPrivate: Boolean
  title: String
}

"""Update users input"""
input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  password: String
}

"""User model"""
type User {
  address: [Address!]!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  isEmailVerified: Boolean!
  lastName: String!
  photo: String
  role: RoleEnumType!
  updatedAt: DateTime!
  userToLists: [UserToList!]
  verificationCode: String
}

"""UserToList model"""
type UserToList {
  id: Float!
  isOwner: Boolean!
  list: List!
  listId: Float!
  user: User!
  userId: String!
}